# Library/ R Packages
library(dplyr)
library(Biobase)
library(GenomicRanges)
library(SGSeq)
library(DESeq2)
annot <- read.csv("annotation.csv",header = T, sep=",")
names(annot)<-c("Patient","Group")
gene.exp <- read.csv("data.csv",header = T,sep=",",row.names=1)
names(gene.exp)
dim(gene.exp)
colSums(gene.exp)
library(DESeq2)
biocLite("DESeq2")
BiocInstaller::biocLite("DESeq2")
library(DESeq2)
source('http://bioconductor.org/biocLite.R')
biocLite('DESeq2')
library(DESeq2)
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
remove.packages("BioGenerics")
BiocManager::install("BiocGenerics", version = "3.8")
BiocManager::install("BiocGenerics", version = "3.8")
library(Biobase)
library(GenomicRanges)
library(SGSeq)
library(DESeq2)
annot <- read.csv("annotation.csv",header = T, sep=",")
names(annot)<-c("Patient","Group")
gene.exp <- read.csv("data.csv",header = T,sep=",",row.names=1)
DESeqDataSet(gene.exp)
load("hammer_eset.RData")
se <- SummarizedExperiment(exprs(hammer.eset))
colData(se) <- DataFrame(pData(hammer.eset))
dds <- DESeqDataSet( se, design = ~ 1 )
head(dds)
type(se)
class(se)
SummarizedExperiment(gene.exp)
class(dds)
x=counts(dds, normalized=TRUE)
plot(sizeFactors(dds), colSums(counts(dds)))
dds <- estimateSizeFactors( dds )
sizeFactors(dds)
colSums(counts(dds))
class(dds)
class(gene.exp)
?ranges()
?RangedData()
head(gene.exp)
groups <- c(rep("P", 17), rep("N", 24))
dds <- DESeqDataSetFromMatrix(countData = gene.exp, colData = as.data.frame(groups) ,design = ~ groups)
head(dd2)
head(dds)
#Estimate size factors
dds <- estimateSizeFactors( dds )
sizeFactors(dds)
colSums(counts(dds))
#column sums of the count by sample
sapply(gene.exp[,2:42], sum)
#column sums of the count by sample
sapply(gene.exp, sum)
#Plot column sums according to size factor
plot(sizeFactors(dds), colSums(counts(dds)))
abline(lm(colSums(counts(dds)) ~ sizeFactors(dds) + 0))
#The argument normalized equals true, divides each column by its size factor.
logcounts <- log2( counts(dds, normalized=TRUE) + 1 )
pc <- prcomp( t( logcounts ) )
######################## EXPLORATORY ANALYSIS ####################
library(rafalib)
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2],
col=colData(dds)$protocol, # color is the protocol
pch=as.numeric(colData(dds)$Time)+15)# point shape by time
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2],
col=colData(dds)$protocol, # color is the protocol
pch=as.numeric(colData(dds)$Time))# point shape by time
#hierarchical clustering
plot(hclust(dist(t(logcounts))), labels=colData(dds)$protocol)
plot(hclust(dist(t(logcounts))), labels=colData(dds)$Time)
#hierarchical clustering
plot(hclust(dist(t(logcounts))), labels=colData(dds)$protocol)
plot(hclust(dist(t(logcounts))), labels=colData(dds)$Time)
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2],
col=colData(dds)$protocol # color is the protocol
)# point shape by time
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2],
col=colData(dds) # color is the protocol
)# point shape by time
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2]#,
#     col=colData(dds) # color is the protocol
)# point shape by time
colData(dds)
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2],
col=colData(dds)$groups # color is the protocol
)# point shape by time
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2],
col=colData(dds)$groups, # color is the protocol
pch=as.numeric(colData(dds)$sizeFactor)+15))# point shape by time
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2],
col=colData(dds)$groups, # color is the protocol
pch=as.numeric(colData(dds)$groups)+15))# point shape by time
#PC 1 VS PC 2
plot(pc$x[,1], pc$x[,2],
col=colData(dds)$groups # color is the protocol
)# point shape by time
#hierarchical clustering
plot(hclust(dist(t(logcounts))), labels=colData(dds)$groups)
#log count of the first two samples
plot(logcounts[,1], logcounts[,2], cex=.1)
# normalization to stabilize variance (regularized logarithm)
rld <- rlog( dds ) # object of class GenomicRanges
pc2 <- prcomp( t( assay(rld) ) )
plot(pc2$x[,1], pc2$x[,2],  col=colData(rld)$protocol,pch=as.numeric(colData(rld)$Time)+15)
plot(pc2$x[,1], pc2$x[,2],  col=colData(rld)$groups)+15)
plot(pc2$x[,1], pc2$x[,2],  col=colData(rld)$groups))
plot(pc2$x[,1], pc2$x[,2],  col=colData(rld)$groups)
plot(hclust(dist(t(assay(rld)))), labels=colData(rld)$groups)
plot(assay(rld)[,1], assay(rld)[,2], cex=.1)
colData(dds)$groups
levels(colData(dds)$groups)
colData(dds)$groups <- relevel(colData(dds)$groups, "control")
colData(dds)$groups <- relevel(colData(dds)$groups, "P")
levels(colData(dds)$groups)
#Change the design
design(dds) <- ~ groups
# runs the model, extract a results table for all genes
dds <- DESeq( dds )
res <- results( dds )
head(res)
plotMA(dds)
plotMA(res)
resBigFC <- results(dds, lfcThreshold=1, altHypothesis="greaterAbs")
plotMA(resBigFC)#, ylim=c(-5,5))
abline(h=c(-1,1),lwd=5)
#Top genes : sort by pvalue
resSort <- res[order(res$pvalue),]
head(resSort)
#Count for the first gene: the unnormalized count
k <- counts(dds)[rownames(resSort)[1],]
se <- DESeqDataSetFromMatrix(countData = gene.exp,
colData = as.data.frame(groups) ,
design = ~ groups)
#Make a stripchart by combining time and protocol
cond <- with(colData(se), factor(groups))
stripchart(log2(k + 1) ~ cond, method="jitter", vertical=TRUE, las=2)
library(org.Rn.eg.db)
biocLite("org.Rn.eg.db")
BiocInstaller::biocLite("org.Rn.eg.db")
head(rownames(dds))
#The first 20 genes according to the lowest p-value
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
geneinfo
library(org.Hs.eg.db)
#The first 20 genes according to the lowest p-value
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
geneinfo
#The first 20 genes according to the lowest p-value
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
keytypes(org.Rn.eg.db)
library(org.Rn.eg.db)
#The keys we can query on Ensembl
keytypes(org.Rn.eg.db)
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
head(rownames(dds))
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="GENENAME")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
keytype="GENENAME")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("GENENAME"),
keytype="GENENAME")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("GENENAME"))
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("GENENAME"),keytype = "ENTREZID")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("GENENAME"),keytype = "GENCODE")
names(resSort)
#The keys we can query on Ensembl
keytypes(org.Rn.eg.db)
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns = c(), keytype = "ENSEMBL")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns = c("GENENAME"), keytype = "ENSEMBL")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns = c("GENENAME"), keytype = "SYMBOL")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns = c("GENENAME"), keytype = "ACCNUM")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns = c("GENENAME"), keytype = "ALIAS")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns = c("GENENAME"), keytype = "ENSEMBL")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
keyname(org.Rn.eg.db)
keys(org.Rn.eg.db)
keytypes(org.Rn.eg.db)
head(rownames(dds))
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="GO")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="REFSEQ")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBLTRANS")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBLPTOR")
require(mygene)
install.packages("mygene")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="SYMBOL")
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
?keys
symbols <- mapIds(org.Hs.eg, keys = ensemblsIDS, keytype = "ENSEMBL", column="SYMBOL")
require("biomaRt")
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
getBM(attributes='hgnc_symbol',
filters = 'ensembl_gene_id',
values = ensemblsIDS,
mart = ensembl)
require("biomaRt")
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
getBM(attributes=rownames(resSort)[1:20],
filters = 'ensembl_gene_id',
values = ensemblIDS,
mart = ensembl)
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id"                                                     "hgnc_symbol"),values=genes,mart= mart)
require("AnnotationDbi")
res<-results(dds,alpha=.05, contrast=c("groups", "N", "P"))
res$symbol <- mapIds(org.Hs.eg.db,keys=row.names(res),column="SYMBOL", keytype="ENSEMBL", multiVals="first")
res$symbol
res$gene <- mapIds(org.Hs.eg.db,keys=row.names(res),column="GENENAME", keytype="ENSEMBL", multiVals="first")
head(res$gene)
