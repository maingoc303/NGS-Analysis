abline(h=c(-1,1),lwd=5)
plotMA(resBigFC, ylim=c(-5,5))
abline(h=c(-2,2),lwd=5)
#Top genes : sort by pvalue
resSort <- res[order(res$pvalue),]
dim(resSort)#[resSort$padj<.05,])
plot(resSort$padj)
abline(h=.03,lwd=2,col=3)
#Count for the first gene: the unnormalized count
k <- counts(dds)[rownames(resSort)[1],]
#Make a stripchart by combining time and protocol
cond <- with(colData(se), factor(groups))
stripchart(log2(k + 1) ~ cond, method="jitter", vertical=TRUE, las=2)
resSort[1]
k
resSort[1]
resSort[2]
dim(resSort)
resSort[6]
resSort[6][resSprt[6]<.05]
resSort[6][resSort[6]<.05]
resSort[resSort[6]<=.05]
resSort[resSort[6]<=.05,]
dim(resSort)
resSort[2]
resSort[3]
resSort[4]
names(resSort)
colnames(resSort)
rownames(resSort)
resSort[6]<.05
resSort[6]
resSort$padj<=.05
rownames(resSort[resSort$padj<=.05])
rownames(resSort[resSort$padj<=.05==TRUE])
which(resSort$padj<=.05)
rownames(resSort)[which(resSort$padj<=.05)]
biplot(pc1)
pc1 = prcomp((norm_count))
warnings()
head(rownames(dds))
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
library(org.Rn.eg.db)
library(org.Rn.eg.db)
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBL")
select(org.Hs.eg.db, rownames(resSort)[1:10], c("SYMBOL","GENENAME","ENTREZID"),"ENSEMBL")
#The keys we can query on Ensembl
keytypes(org.Rn.eg.db)
res$symbol <- mapIds(org.Hs.eg.db,keys=row.names(res),
column="SYMBOL", keytype="ENSEMBLTRANS",
multiVals="first")
library("org.Hs.eg.db")
res<-results(dds,alpha=.05, contrast=c("groups", "Novel", "Placebo"))
res
geneinfo <- select(org.Rn.eg.db, keys=rownames(resSort)[1:20],
columns=c("ENSEMBL","SYMBOL","GENENAME"),
keytype="ENSEMBLTRANS")
res$symbol <- mapIds(org.Hs.eg.db,keys=row.names(res),
column="SYMBOL", keytype="ENSEMBLTRANS",
multiVals="first")
res$symbol
select(org.Hs.eg.db, rownames(resSort)[1:10], c("SYMBOL","GENENAME","ENTREZID"),"ENSEMBL")
# names of genes that are differential expression
rownames(resSort)[which(resSort$padj<=.05)]
# names of genes that are differential expression
length(rownames(resSort)[which(resSort$padj<=.05)])
gene_names = select(org.Hs.eg.db, rownames(resSort)[1:12],
c("SYMBOL","GENENAME","ENTREZID"),"ENSEMBL")
gene_names
# poisson model for count data
plotDispEsts( dds, ylim = c(1e-6, 1e1) )
# poisson model for count data
plotDispEsts( dds)#, ylim = c(1e-6, 1e1) )
hist( res$pvalue, breaks=20, col="grey" )
# create bins using the quantile function
qs <- c( 0, quantile( res$baseMean[res$baseMean > 0], 0:7/7 ) )
# "cut" the genes into the bins
bins <- cut( res$baseMean, qs )
# rename the levels of the bins using the middle point
levels(bins) <- paste0("~",round(.5*qs[-1] + .5*qs[-length(qs)]))
# calculate the ratio of p values less than .01 for each bin
ratios <- tapply( res$pvalue, bins, function(p) mean( p < .01, na.rm=TRUE ) )
# plot these ratios
barplot(ratios, xlab="mean normalized count", ylab="ratio of small p values")
attr(res,"filterThreshold")
plot(attr(res,"filterNumRej"),type="b",
xlab="quantiles of 'baseMean'",
ylab="number of rejections")
as.matrix( sampleDists )[ 1:3, 1:3]
sampleDists <- dist( t( assay(rld) ) )
as.matrix( sampleDists )[ 1:3, 1:3]
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( rld$treatment,
rld$patient, sep="-" )
colnames(sampleDistMatrix) <- NULL
rownames(sampleDistMatrix) <- paste( rld$groups,
rld$patient, sep="-" )
colnames(sampleDistMatrix) <- NULL
library( "gplots" )
library( "RColorBrewer" )
colours = colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
heatmap.2( sampleDistMatrix, trace="none", col=colours)
heatmap.2( sampleDistMatrix, trace="none", col=colours,cex=.6)
heatmap.2( sampleDistMatrix, trace="none", col=colours)
colours <- c(rgb(1:3/4,0,0),rgb(0,1:3/4,0),rgb(0,0,1:3/4),rgb(1:3/4,0,1:3/4))
plotPCA( rld, intgroup = c("patient","groups"), col=colours )
colours <- c(rgb(1:3/4,0,0),rgb(0,1:3/4,0),rgb(0,0,1:3/4),rgb(1:3/4,0,1:3/4))
plotPCA( rld, intgroup = c("patient","groups"), col=colours )
plotPCA( rld, intgroup = c("patient","groups"))#, col=colours )
# gene clustering
library( "genefilter" )
topVarGenes <- head( order( rowVars( assay(rld) ), decreasing=TRUE ), 35 )
heatmap.2( assay(rld)[ topVarGenes, ], scale="row",
trace="none", dendrogram="column",
col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
ColSideColors = c( Control="gray", DPN="darkgreen", OHT="orange" )[
colData(rld)$groups ] )
heatmap.2( assay(rld)[ topVarGenes, ], scale="row",
trace="none", dendrogram="column",
col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
ColSideColors = c( Control="gray", DPN="darkgreen", OHT="orange" )[
colData(rld)$groups ] )
rld
?rlog
library(Biobase)
library(multtest, verbose = F)
library(ggplot2)
topVarGenes <- head( order( rowVars( assay(rld) ), decreasing=TRUE ), 35 )
heatmap.2( assay(rld)[ topVarGenes, ], scale="row",
trace="none", dendrogram="column",
col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
ColSideColors = c( Control="gray", DPN="darkgreen", OHT="orange" )[
colData(rld)$groups ] )
library(limma)
library(edge)
mod =model.matrix(~annot$Group)
fit = lm.fit(mod,t(norm_count))
names(fit)
tidy(fit$coefficients[,1])
library(tidyverse)
tidy(fit$coefficients[,1])
library(tidyr)
tidy(fit$coefficients[,1])
fit_limma = lmFit(t(norm_count),mod)
fit_limma = lmFit((norm_count),mod)
names(fit_limma)
fit_limma$coefficients[1,]
summary(fit_limma)
fit1 <- eBayes(fit_limma)
head(fit1$t)
head(fit1$p.value)
topTable <- topTable(fit1,number=nrow(mtbl.exp),coef=2)
topTable <- topTable(fit1,number=nrow(norm_count),coef=2)
head(topTable)
dim(topTable)
dim(topTable[topTable[,4]<=0.05,])
length(topTable[,4])
fit_limma1 = lmFit((logcounts),mod)
names(fit_limma1)
fit_limma1$coefficients[1,]
summary(fit_limma1)
fit2 <- eBayes(fit_limma1)
head(fit2$t)
head(fit2$p.value)
topTable <- topTable(fit2,number=nrow(logcounts),coef=2)
head(topTable)
topTable[topTable[,4]<=0.05,]
topTable <- topTable(fit2,number=nrow(logcounts),coef=2)
head(topTable)
dim(topTable)
dim(topTable[topTable[,4]<=0.05,])
topTable <- topTable(fit1,number=nrow(norm_count),coef=2)
head(topTable)
dim(topTable)
dim(topTable[topTable[,4]<=0.05,])
topVarGenes
y <- voom(norm_count, mod, plot = T)
knitr::opts_chunk$set(cache = TRUE, autodep = TRUE, echo = TRUE, tidy = FALSE)
pkgsGithub = c("SpiecEasi", "RCM") #Github packages
#pkgsGithub = c("SpiecEasi") #Github packages
pkgsCRAN = c("ggplot2", "lme4", "zCompositions", "lattice", "igraph", "reshape2") #CRAN packages
pkgsBioConductor = c("phyloseq", "dada2", "DECIPHER", "phangorn",
"edgeR", "limma", "DESeq2", "metagenomeSeq") #BioConductor packages
for (i in c(pkgsCRAN, pkgsBioConductor, pkgsGithub)){
suppressPackageStartupMessages(library(i, character.only = TRUE, quietly = TRUE))
}
library(statmod)
library(BiocManager)
library(gridExtra)
# negative binomial regression
library(MASS)
m1 <- glm.nb(norm_count ~ mod, data = norm_count)
m1 <- glm.nb(norm_count ~ mod, data = as.data.frame(norm_count))
m1 <- glm.nb(norm_count[1,] ~ mod, data = as.data.frame(norm_count))
summary(m1)
m1 <- glm.nb(logcounts[1,] ~ mod, data = as.data.frame(logcounts))
summary(m1)
m1 <- glm(logcounts[1,] ~ mod, data = as.data.frame(logcounts))
summary(m1)
m1 <- glm(logcounts[1,] ~ as.factor(annot$Group), data = as.data.frame(logcounts))
summary(m1)
pval=c(1:dim(norm_count)[1])
m1$model
m1$coefficients
coef(m1)[2]
coef(summary(m1))[,4]
coef(summary(m1))
coef(summary(m1))[,4][2]
pval=c(1:dim(norm_count)[1])
for (i in 1:dim(norm_count)[1]){
m1 <- glm(norm_count[i,]~as.factor(annot$Group))
pval[i]=coef(summary(m1))[,4][2]
}
plot(pval)
hist(pval)
hist(pval/dim(norm_count)[1])
hist(pval)
holm<-mt.rawp2adjp(pval, proc=c("Holm"))
bonf<-mt.rawp2adjp(pval, proc=c("Bonferroni"))
allp<-cbind(pval, bonf$adjp[order(bonf$index),2],holm$adjp[order(holm$index),2])#,bh$adjp[order(bh$index),2],by$adjp[order(by$index),2])
mt.plot(allp,plottype="pvsr", proc=c("rawp","Bonferroni","Holm"),lty=c(1,2,3),col=1:3,lwd=2)
bh<-mt.rawp2adjp(pval, proc=c("BH"))
by<-mt.rawp2adjp(pval, proc=c("BY"))
allp<-cbind(pval, bonf$adjp[order(bonf$index),2],holm$adjp[order(holm$index),2],bh$adjp[order(bh$index),2],by$adjp[order(by$index),2])
mt.plot(allp,plottype="pvsr", proc=c("rawp","Bonferroni","Holm","BH","BY"),leg=c(2100,0.375),lty=c(1,2,3,4,5),col=1:5,lwd=2)
length(pval)
dim(allp)
mt.plot(allp,plottype="pvsr", proc=c("rawp","Bonferroni","Holm","BH","BY"))#,leg=c(2100,0.375),lty=c(1,2,3,4,5),col=1:5,lwd=2)
mt.plot(allp,plottype="pvsr", proc=c("rawp","Bonferroni","Holm","BH","BY"),lty=c(1,2,3,4,5),col=1:5,lwd=2)#,leg=c(2100,0.375))
library(multtest, verbose = FALSE)
holm<-mt.rawp2adjp(pval, proc=c("Holm"))
bonf<-mt.rawp2adjp(pval, proc=c("Bonferroni"))
bh<-mt.rawp2adjp(pval, proc=c("BH"))
by<-mt.rawp2adjp(pval, proc=c("BY"))
allp<-cbind(pval, bonf$adjp[order(bonf$index),2],holm$adjp[order(holm$index),2],bh$adjp[order(bh$index),2],by$adjp[order(by$index),2])
par(mfrow=c(1,1))
mt.plot(allp,plottype="pvsr", proc=c("rawp","Bonferroni","Holm","BH","BY"),lty=c(1,2,3,4,5),col=1:5,lwd=2)#,leg=c(2100,0.375))
nrow(pval)
length(pval)
length(allp)
dim(allp)
install.packages(c("glm2", "mdatools", "samr", "tree"))
pval=c(1:dim(norm_count)[1])
for (i in 1:dim(norm_count)[1]){
m1 <- glm(norm_count[i,]~as.factor(annot$Group),family = "poisson")
pval[i]=coef(summary(m1))[,4][2]
}
rowVars(norm_count)
plot(rowMeans(norm_count),rowVars(norm_count))
plot(rowMeans(norm_count),rowVars(norm_count),labels=rownames(norm_count))
plot(rowMeans(norm_count),rowVars(norm_count))#,labels=rownames(norm_count))
warnings()
plot(rowMeans(norm_count),rowVars(norm_count),pch=20,col=3)#,labels=rownames(norm_count))
# VOOM transformation to apply linear regression and limma
voom1 <- voom(norm_count, mod, plot = T)
# VOOM transformation to apply linear regression and limma
png("voom1.png")
voom1 <- voom(norm_count, mod, plot = T)
dev.off()
# heat map
library(ComplexHeatmap)
install.packages("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
# heat map
library(ComplexHeatmap)
library(circlize)
# get the top genes
sigGenes <- as.data.frame(norm_count) %>%
rownames_to_column("GeneID") %>%
top_n(150, wt=-padj) %>%
pull("GeneID")
# get the top genes
sigGenes <- as.data.frame(res) %>%
rownames_to_column("GeneID") %>%
top_n(150, wt=-padj) %>%
pull("GeneID")
# filter the data for the top 200 by padj in the LRT test
plotDat <- vst(dds)[sigGenes,] %>%
assay()
z.mat <- t(scale(t(norm_count), center=TRUE, scale=TRUE))
# colour palette
myPalette <- c("red3", "ivory", "blue3")
myRamp = colorRamp2(c(-2, 0, 2), myPalette)
# Heatmap
Heatmap(z.mat, name = "z-score",
col = myRamp,
show_row_name = FALSE,
cluster_columns = FALSE)
# get the top genes
sigGenes <- as.data.frame(resSort) %>%
rownames_to_column("GeneID") %>%
top_n(12, wt=-padj) %>%
pull("GeneID")
# filter the data for the top 200 by padj in the LRT test
plotDat <- vst(dds)[sigGenes,] %>%
assay()
z.mat <- t(scale(t(norm_count), center=TRUE, scale=TRUE))
# colour palette
myPalette <- c("red3", "ivory", "blue3")
myRamp = colorRamp2(c(-2, 0, 2), myPalette)
# Heatmap
Heatmap(z.mat, name = "z-score",
col = myRamp,
show_row_name = FALSE,
cluster_columns = FALSE)
#### --------------------------------------------------------
# VOOM transformation to apply linear regression and limma
library(edgeR)
BBiocManager::install("edgeR")
BiocManager::install("edgeR")
#### --------------------------------------------------------
# VOOM transformation to apply linear regression and limma
library(edgeR)
d0 <- DGEList(norm_count)
# Filter low-expressed genes
cutoff <- 1
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # number of genes left
snames <- colnames(norm_count) # Sample names
snames
plotMDS(d, col = as.numeric(groups))
plotMDS(d, col = as.numeric(annot$Group))
plotMDS(d, col = as.numeric(annot$Group)+2)
mm <- model.matrix(~0 + groups)
y <- voom(d, mm, plot = T)
tmp <- voom(d0, mm, plot = T)
y <- voom(d, mm, plot = T)
# Filter low-expressed genes
cutoff <- 1.2
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
y <- voom(d, mm, plot = T)
# fitting linear model in limma
fit <- lmFit(y, mm)
head(coef(fit))
fit.e<-eBayes(fit)
top.table <- topTable(fit.e, sort.by = "P", n = Inf)
top.table <- topTable(fit.e, sort.by = "F", n = Inf)
head(top.table, 20)
top.table <- topTable(fit.e, sort.by = "ADJ..P.VALF", n = Inf)
top.table <- topTable(fit.e, sort.by = "Adj.P.Val", n = Inf)
top.table <- topTable(fit.e, sort.by = "F", n = Inf)
length(which(top.table$adj.P.Val < 0.05))
# poisson model for count data
plotDispEsts( dds)#, ylim = c(1e-6, 1e1) )
hist( res$pvalue, breaks=20, col="grey" )
# create bins using the quantile function
qs <- c( 0, quantile( res$baseMean[res$baseMean > 0], 0:7/7 ) )
# "cut" the genes into the bins
bins <- cut( res$baseMean, qs )
# rename the levels of the bins using the middle point
levels(bins) <- paste0("~",round(.5*qs[-1] + .5*qs[-length(qs)]))
# calculate the ratio of p values less than .01 for each bin
ratios <- tapply( res$pvalue, bins, function(p) mean( p < .01, na.rm=TRUE ) )
# plot these ratios
barplot(ratios, xlab="mean normalized count", ylab="ratio of small p values")
attr(res,"filterThreshold")
plot(attr(res,"filterNumRej"),type="b",
xlab="quantiles of 'baseMean'",
ylab="number of rejections")
sampleDists <- dist( t( assay(rld) ) )
as.matrix( sampleDists )[ 1:3, 1:3]
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( rld$groups,
rld$patient, sep="-" )
colnames(sampleDistMatrix) <- NULL
colours = colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
heatmap.2( sampleDistMatrix, trace="none", col=colours)
colours <- c(rgb(1:3/4,0,0),rgb(0,1:3/4,0),rgb(0,0,1:3/4),rgb(1:3/4,0,1:3/4))
plotPCA( rld, intgroup = c("patient","groups"))#, col=colours )
plotPCA( rld, intgroup = c("Placebo","Novel"))#, col=colours )
colData(dds)
plotPCA( rld, intgroup = c("sizeFactor","groups"))#, col=colours )
topVarGenes <- head( order( rowVars( assay(rld) ), decreasing=TRUE ), 35 )
heatmap.2( assay(rld)[ topVarGenes, ], scale="row",
trace="none", dendrogram="column",
col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
ColSideColors = c( Control="gray", DPN="darkgreen", OHT="orange" )[
colData(rld)$groups ] )
topVarGenes <- head( order( rowVars( assay(rld) ), decreasing=TRUE ), 15 )
heatmap.2( assay(rld)[ topVarGenes, ], scale="row",
trace="none", dendrogram="column",
col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
ColSideColors = c( Control="gray", DPN="darkgreen", OHT="orange" )[
colData(rld)$groups ] )
library(limma)
library(edge)
library(tidyr)
mod =model.matrix(~annot$Group)
fit = lm.fit(mod,t(norm_count))
names(fit)
fit_limma1 = lmFit((norm_count),mod)
names(fit_limma)
fit_limma$coefficients[1,]
summary(fit_limma)
fit1 <- eBayes(fit_limma)
head(fit1$t)
head(fit1$p.value)
topTable <- topTable(fit1,number=nrow(norm_count),coef=2)
head(topTable)
dim(topTable)
dim(topTable[topTable[,4]<=0.05,])
length(topTable[,4])
length(topTable[,4]<.05)
fit_limma1 = lmFit((logcounts),mod)
names(fit_limma1)
fit_limma1$coefficients[1,]
summary(fit_limma1)
fit2 <- eBayes(fit_limma1)
head(fit2$t)
head(fit2$p.value)
topTable <- topTable(fit2,number=nrow(logcounts),coef=2)
head(topTable)
dim(topTable)
dim(topTable[topTable[,4]<=0.05,])
plot(rowMeans(norm_count),rowVars(norm_count),col=3,pch=18)
length(rowMeans(norm_count))
sum(rowMeans(norm_count)>1)
sum(rowMeans(norm_count)>2)
y <- voom(d, mm, plot = T)
tmp <- voom(d0, mm, plot = T)
png("voom.png")
par(mfrow=c(1,2))
y <- voom(d, mm, plot = T)
tmp <- voom(d0, mm, plot = T)
dev.off()
tmp <- voom(d0, mm, plot = T, main="before fitering low expressed gene")
png("voom.png")
par(mfrow=c(1,2))
tmp <- voom(d0, mm, plot = T)#, main="before fitering low expressed gene")
y <- voom(d, mm, plot = T)
dev.off()
plot(rowMeans(norm_count),rowVars(norm_count),col=3,pch=18)
length(rowMeans(norm_count))
sum(rowMeans(norm_count)>2)
png("var.png")
plot(rowMeans(norm_count),rowVars(norm_count),col=3,pch=18)
dev.off()
mm <- model.matrix(~ groups)
y <- voom(d, mm, plot = T)
# fitting linear model in limma
fit <- lmFit(y, mm)
top.table <- topTable(fit.e, sort.by = "F", n = Inf)
fit.e<-eBayes(fit)
top.table <- topTable(fit.e, sort.by = "F", n = Inf)
fit.e<-eBayes(fit)
top.table <- topTable(fit.e, sort.by = "p", n = Inf)
head(top.table, 20)
length(which(top.table$adj.P.Val < 0.05))
head(top.table, 10)
xtable(head(top.table, 10))
library(xtable)
xtable(head(top.table, 10))
# Filter low-expressed genes
cutoff <- 1
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # number of genes left
#multidimensional scaling
plotMDS(d, col = as.numeric(annot$Group)+2)
tmp <- voom(d0, mm, plot = T)#, main="before fitering low expressed gene")
y <- voom(d, mm, plot = T)
# fitting linear model in limma
fit <- lmFit(y, mm)
head(coef(fit))
fit.e<-eBayes(fit)
top.table <- topTable(fit.e, sort.by = "p", n = Inf)
xtable(head(top.table, 10))
length(which(top.table$adj.P.Val < 0.05))
png("voom.png")
par(mfrow=c(1,2))
tmp <- voom(d0, mm, plot = T)#, main="before fitering low expressed gene")
y <- voom(d, mm, plot = T)
dev.off()
rownames(top.table)
gene_names = select(org.Hs.eg.db, rownames(top.table)[1:7],
c("SYMBOL","GENENAME","ENTREZID"),"ENSEMBL")
rownames(top.table)[1;7]
rownames(top.table)[1:7]
gene_names = select(org.Hs.eg.db, rownames(resSort)[1:12],
c("SYMBOL","GENENAME","ENTREZID"),"ENSEMBL")
library("org.Hs.eg.db")
select(org.Hs.eg.db, rownames(top.table)[1:7],
c("SYMBOL","GENENAME","ENTREZID"),"ENSEMBL")
res$symbol <- mapIds(org.Hs.eg.db,keys=row.names(res),
column="SYMBOL", keytype="ENSEMBLTRANS",
multiVals="first")
select(org.Hs.eg.db, rownames(resSort)[1:12],
c("SYMBOL","GENENAME","ENTREZID"),"ENSEMBLTRANS")
library(org.Rn.eg.db)
#The keys we can query on Ensembl
keytypes(org.Rn.eg.db)
res$gene <- mapIds(org.Hs.eg.db,keys=row.names(res),
column="GENENAME", keytype="ENSEMBL",
multiVals="first")
gene_names = select(org.Hs.eg.db, keys=rownames(resSort)[1:12],
c("SYMBOL","GENENAME","ENTREZID"),"ENSEMBLTRANS")
gene <- mapIds(org.Hs.eg.db,keys=row.names(top.table)[1:7],
column="GENENAME", keytype="ENSEMBL",
multiVals="first")
gene
xtable(gene)
#multidimensional scaling
plotMDS(d, col = as.numeric(annot$Group)+2)
citation(package="DESeq2")
citation(package="edgeR")
citation(package="limma")
